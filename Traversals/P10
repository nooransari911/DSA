/*BSF and DSF on a graph represented using adjacency matrix*/
#include<stdio.h>
#define max 10
typedef struct que
{
	int rear,front;
	int data[max];
}que;

que p;
int G[max][max];
int n=0;
int visited[max];

void main()
{
	int i,j,v,op,e,x;
	int empty( );
    int full();
    void insert(int );
    int dele();
    void BFS(int);
    void DFS(int);

	printf("\nEnter no of vertices : ");
	scanf("%d",&n);
	printf("\nEnter no of edges : ");
	scanf("%d",&e);
	printf("\nEnter the edges (STARTING VERTEX 0):\n ");
	for(x=0;x<e;x++)
        {
        printf("\nEnter the edge(%d): ",x+1);
        scanf("%d%d",&i,&j);
        G[i][j]=G[j][i]=1;
        }
	printf("\nThe adjecency matrix of  graph is:\n\n ");
	for(i=0;i<n;i++)
        {
        for(j=0;j<n;j++)
           printf("%d\t",G[i][j]);
        printf("\n\n");
        }
	do{
	   printf("\n\n1)DFS\n2)BFS\n3)QUIT");
	   printf("\nEnter Your choice : ");
	   scanf("%d",&op);
	   switch(op)
	    { case 1:   printf("\nEnter the starting vertex for DFS : ");
                    scanf("%d",&v);
                    for(i=0;i<n;i++)
                        visited[i]=0;
                    DFS(v);
                    break;
	      case 2:   printf("\nEnter the starting vertex for BFS : ");
                     scanf("%d",&v);
                     BFS(v);break;
	    }
	  }while(op!=3);
}

void BFS(int v)
{
	int visited[max],i;
	void insert(int );
	p.rear=-1;
	p.front=0;
	for(i=0;i<n;i++)
	  visited[i]=0;
	insert(v);
	printf("\n visit\n%d",v);
	visited[v]=1;
	while(!empty())
	{
		v=dele();
		// visit and add adjecency vertices
		for(i=0;i<n;i++)
			if(visited[i]==0 && G[v][i]!=0)
			{
				insert(i);
				visited[i]=1;
				printf("\n%d",i);
			}
	}
}

int empty()
{
	if(p.front>p.rear)
		return(1);
	return(0);
}

int full()
{
	if(p.rear==max-1)
		return(1);
	return(0);
}

void insert(int x)
{
		p.rear++;
		p.data[p.rear]=x;
}
int dele()
{
	int x;
	x=p.data[p.front];
	if(p.rear==p.front)
	{
		p.rear=-1;
		p.front=0;
	}
	else
		p.front++;
	return(x);
}
void DFS(int i)
{
	int j;
	printf("\n%d",i);
	visited[i]=1;
	for(j=0;j<n;j++)
		if(!visited[j] && G[i][j]==1)
			DFS(j);
}
